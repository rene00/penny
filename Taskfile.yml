---
version: '3'
silent: true
env:
  FLASK_SKIP_DOTENV: 1
dotenv: ['.env']
vars:
  CONTAINER_TAG:
    sh: git log -n1 --format=%h
  CONTAINER_REGISTRY: ghcr.io
  CONTAINER_IMAGE_NAME: rene00/penny

tasks:
  db:migrate:
    desc: "run flask db migrate"
    cmds:
      - poetry run flask db migrate
  db:upgrade:
    envs:
      - PENNY_SKIP_IMPORT_ALL_TYPES: 1
    cmds:
      - poetry run flask db upgrade
  build:python3.9:
    desc: "check if python 3.9 is installed"
    vars:
      PYTHON_MAJOR_MINOR_VERSION:
        sh: python -c 'import sys;print(f"{sys.version_info.major}{sys.version_info.minor}")'
    preconditions:
      - sh: '[ {{.PYTHON_MAJOR_MINOR_VERSION}} == "39" ]'
        msg: "python 3.9 must be installed"
  build:
    deps: [build:python3.9]
    cmds:
      - poetry install --no-dev
  build:dev:
    deps: [build:python3.9]
    cmds:
      - poetry install

  run:queue:
    desc: "run the penny worker app locally"
    dotenv: ['{{.HOME}}/.penny.env']
    cmds:
      - poetry run rqworker --url redis://localhost:6379/0 --verbose --path=.

  run:www:
    desc: "run the penny web app locally"
    dotenv: ['{{.HOME}}/.penny.env']
    vars:
      FLASK_HOST: 127.0.0.1
      FLASK_PORT: 5000
    cmds:
      - mkdir -p files/transactions files/uploads
      - poetry run flask run --host={{ .FLASK_HOST }} --port={{ .FLASK_PORT }}

  container:build:
    cmds:
      - podman build . -t {{.CONTAINER_REGISTRY}}/{{.CONTAINER_IMAGE_NAME}}:{{.CONTAINER_TAG}} {{.PODMAN_BUILD_ARGS}}
  container:run:
    vars:
      HOST_PORT: 5000
    cmds:
      - |
        podman run -it --restart always \
          --publish {{ .HOST_PORT }}:5000 \
          -e CONFIG_FILE=/app/penny/conf.py \
          --mount source=penny,target=/penny \
          --name penny {{.CONTAINER_REGISTRY}}/{{.CONTAINER_IMAGE_NAME}}:{{.CONTAINER_TAG}}
  test:
    deps: [build:dev]
    cmds:
      - poetry run pytest .
  seed:account:
    desc: "seed the db with a test user account and resources"
    cmds:
      - poetry run flask seed account
  seed:types:
    desc: "seed the db with types"
    dotenv: ['{{.HOME}}/.penny.env']
    cmds:
      - poetry run flask seed types

  task:tag_match:
    cmds:
      - poetry run flask task tag_match

  task:fetch_tx_meta:
    dotenv: ['{{.HOME}}/.penny.env']
    cmds:
      - poetry run flask task fetch-tx-meta {{.CLI_ARGS}}

  txmeta:transaction:
    desc: "txmeta transaction"
    dotenv: ['{{.HOME}}/.penny.env']
    cmds:
      - poetry run flask txmeta transaction {{.CLI_ARGS}}

  transaction:get:
    desc: "get transaction"
    dotenv: ['{{.HOME}}/.penny.env']
    cmds:
      - poetry run flask transaction get {{.CLI_ARGS}}


  report:account_monthly_breakdown:
    env:
      FLASK_DEBUG: 1
      FLASK_APP: penny
      CONFIG_FILE: ./conf.py
      USER_ID: 1
      ACCOUNT_ID: 95
    cmds:
      - poetry run flask report account_monthly_breakdown $USER_ID $ACCOUNT_ID
  report:tag_monthly_breakdown:
    env:
      FLASK_DEBUG: 1
      FLASK_APP: penny
      CONFIG_FILE: ./conf.py
      USER_ID: 1
      TAG_ID: 4
    cmds:
      - poetry run flask report tag_monthly_breakdown $USER_ID $TAG_ID
